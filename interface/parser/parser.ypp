/* ============================================================== */
/*                             C PRELUDE                          */
/* ============================================================== */

%{

#include "../representation.h" // includes knit_parser ?

#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <map>
#include <vector>


using namespace std;

int line_number	= 1;	          /* number of current source line */
map<string,string> local_param;   /* map of (local) parameters for trapezoids */
map<string,Element* > piece_map;   /* map of the pieces */
extern int yylex();	          /* lexical analyzer generated from lex.l */
extern char *yytext;	          /* last token, defined in lex.l  */

void yyerror(char *s){
	fprintf(stderr, "line %d: syntax error. Last token was \"%s\"\n", line_number, yytext);
	exit(1);
}

void error(char *s){
	fprintf(stderr, "line %d: error: %s\n", line_number, s);
	exit(1);
}

%}

/* ============================================================== */
/*                     TYPES OF NON-TERMINALS                     */         
/* ============================================================== */

%union {
  int integer;
  char* name;
  Element* elt;
}


/* ============================================================== */
/*                       TOKENS DECLARATION
/* ============================================================== */

/* Types */
%token INT
%token NAME
%token DESCR

/* DÃ©limiteurs */
%token LPAREN RPAREN
%token LBRACE RBRACE

/* Pieces */
%token  PIECE DEF SEQ SEP COL

/* Entete */
%token H_NAME H_DESCR

/* Vocabulary */
%token START STOP TRAPEZOID LINK LEFT RIGHT SPLIT

/* others */

%token END_OF_FILE
%right SEQ

/* associate the types */

%type<integer> INT
%type<integer> trapezoid_params params main // Just a return value
%type<name> NAME DESCR value

%type<elt> element




/* Axiom */
%start main

%%

/* ============================================== */
/*            The grammar with actions            */
/* ============================================== */

// TODO : Add actions

main:
	H_NAME NAME H_DESCR DESCR body END_OF_FILE 		{ knit_parsed = Knit($2,$4,piece_map); $$ = 0;}
;

body:
      /* Empty */ 						{ piece_map.clear(); }   
      | PIECE NAME DEF START SEQ element body 			{ piece_map.insert(pair<string,Element*> ($2,$6)); }
;

element:
  STOP                                        			{ $$ = new Stop(); }
| LINK LEFT NAME                      				{ $$ = new Link($3,Slot::Left); }
| LINK RIGHT NAME						{ $$ = new Link($3,Slot::Right); }
| SPLIT INT LBRACE element RBRACE LBRACE element RBRACE	 	{ $$ = new Split($4,$7,$2); } 
| TRAPEZOID trapezoid_params SEQ element 			{ int bidon = $2; // generate parameters
                                                                  $$ = new TrapezoidElem(Trapezoid(local_param),$4);} // Bug
;

trapezoid_params:
  LPAREN params RPAREN                    			{ $$ = $2; }
;

params:
  /* Empty */                                  			{ local_param.clear(); $$ = 0; } // stupid return value 
| NAME COL value SEP params                   			{ int bidon = $5; // generate the end, to start with clean (empty)
								  local_param.insert(pair<string,string>($1,$3)); 
								  $$ = bidon; }
;
/*
param:
  NAME COL value                      				{ pair<string,string>($1,$3);}
;
*/
value:
  INT                                       			{ to_string($1); }
| NAME                                      			{ $1; }
;


